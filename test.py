import json
import re

solution = {
    "questions": '```json\n{\n  "questions": [\n    {\n      "question": "What is the primary purpose of a `Dockerfile` in the context of application deployment?",\n      "options": [\n        "To define the network configuration for a Docker Swarm",\n        "To specify instructions for building a Docker image",\n        "To monitor the health of running Docker containers",\n        "To manage storage volumes for persistent data"\n      ],\n      "answer": "To specify instructions for building a Docker image",\n      "topic": "Containerization (Docker)",\n      "difficulty": "intermediate",\n      "source": "resume"\n    },\n    {\n      "question": "In Python, what is the main purpose of a decorator?",\n      "options": [\n        "To create a new instance of a class",\n        "To define a class method or static method",\n        "To modify or extend the behavior of a function or class without permanently altering it",\n        "To handle asynchronous operations using `async`/`await`"\n      ],\n      "answer": "To modify or extend the behavior of a function or class without permanently altering it",\n      "topic": "Advanced Python Concepts",\n      "difficulty": "intermediate",\n      "source": "resume"\n    },\n    {\n      "question": "Which SQL JOIN clause returns only the rows that have matching values in both tables, effectively discarding rows where a match does not exist?",\n      "options": [\n        "LEFT JOIN",\n        "RIGHT JOIN",\n        "FULL OUTER JOIN",\n        "INNER JOIN"\n      ],\n      "answer": "INNER JOIN",\n      "topic": "SQL and Relational Database Concepts",\n      "difficulty": "intermediate",\n      "source": "resume"\n    },\n    {\n      "question": "In OAuth 2.0, what is the primary role of a Refresh Token?",\n      "options": [\n        "To encrypt sensitive data transmitted between client and server",\n        "To authenticate the user directly without an Authorization Server",\n        "To obtain new Access Tokens after the current one expires without re-authenticating the user",\n        "To verify the integrity of the client application"\n      ],\n      "answer": "To obtain new Access Tokens after the current one expires without re-authenticating the user",\n      "topic": "Authentication & Authorization Mechanisms",\n      "difficulty": "intermediate",\n      "source": "resume"\n    },\n    {\n      "question": "You\'ve made changes on a feature branch and now need to incorporate them into the `main` branch, but you want to keep a clean, linear project history. Which Git command would you typically use for this?",\n      "options": [\n        "`git merge main`",\n        "`git reset --hard main`",\n        "`git checkout main && git cherry-pick <commit-hash>`",\n        "`git rebase main`"\n      ],\n      "answer": "`git rebase main`",\n      "topic": "Version Control (Git)",\n      "difficulty": "intermediate",\n      "source": "resume"\n    },\n    {\n      "question": "Which Spring Boot annotation is specifically designed to handle incoming HTTP GET requests for a particular endpoint in a RESTful controller?",\n      "options": [\n        "@RequestMapping(method = RequestMethod.GET)",\n        "@PostAuthorize",\n        "@GetMapping",\n        "@ResponseBody"\n      ],\n      "answer": "@GetMapping",\n      "topic": "Java Backend Fundamentals (Spring Boot)",\n      "difficulty": "intermediate",\n      "source": "job_profile"\n    },\n    {\n      "question": "In Java, what is the primary purpose of an interface?",\n      "options": [\n        "To define a concrete class with default method implementations",\n        "To provide a blueprint for creating objects without defining any methods",\n        "To define a contract that classes must adhere to by implementing its methods",\n        "To enable multiple inheritance of state between classes"\n      ],\n      "answer": "To define a contract that classes must adhere to by implementing its methods",\n      "topic": "Core Java Programming",\n      "difficulty": "intermediate",\n      "source": "job_profile"\n    },\n    {\n      "question": "In Spring Data JPA, which annotation is used to mark a POJO (Plain Old Java Object) class as a persistent entity that maps to a database table?",\n      "options": [\n        "@Component",\n        "@Service",\n        "@Repository",\n        "@Entity"\n      ],\n      "answer": "@Entity",\n      "topic": "Database Interaction & ORM (Java/JPA)",\n      "difficulty": "intermediate",\n      "source": "job_profile"\n    },\n    {\n      "question": "Which of the following Object-Oriented Programming (OOP) principles is a fundamental concept present in both Python and Java, allowing for data hiding and bundling data with methods that operate on that data?",\n      "options": [\n        "Duck Typing",\n        "Metaclass Programming",\n        "Encapsulation",\n        "Multiple Inheritance (in the same way)"\n      ],\n      "answer": "Encapsulation",\n      "topic": "OOP Concepts (Python â†” Java)",\n      "difficulty": "intermediate",\n      "source": "bridge"\n    },\n    {\n      "question": "What is the primary benefit of writing unit tests for individual functions or methods in any programming language, such as Python or Java?",\n      "options": [\n        "To perform end-to-end testing of the entire application flow",\n        "To measure the overall performance of the system under load",\n        "To ensure the correctness and reliability of individual code components in isolation",\n        "To deploy the application automatically to a production environment"\n      ],\n      "answer": "To ensure the correctness and reliability of individual code components in isolation",\n      "topic": "Unit Testing Principles",\n      "difficulty": "intermediate",\n      "source": "bridge"\n    }\n  ]\n}\n```'
}
only_questions = solution["questions"]
print(only_questions)
#cleaned_json = re.sub(r"^```json\n|\n```$", "", only_questions.strip())
#questions = json.loads(cleaned_json)

